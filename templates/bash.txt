{%- let section = "# =============================================================================\n#" -%}
{%- let not_configured = "# -- not configured --" -%}

{{ section }}
# Utility functions for zoxide.
#

# pwd based on the value of _ZO_RESOLVE_SYMLINKS.
function __zoxide_pwd() {
{%- if resolve_symlinks %}
    \builtin pwd -P
{%- else %}
    \builtin pwd -L
{%- endif %}
}

# cd + custom logic based on the value of _ZO_ECHO.
function __zoxide_cd() {
    # shellcheck disable=SC2164
    \builtin cd "$@" {%- if echo %} && __zoxide_pwd {%- endif %}
}

{{ section }}
# Hook configuration for zoxide.
#

{# Custom prompts often use "$?" to show the exit status of the previous
 # command. Adding __zoxide_hook to the front of $PROMPT_COMMAND would change
 # the exit status, so we must capture it and return it manually instead. -#}

# Hook to add new entries to the database.
{%- match hook %}
{%- when InitHook::None %}
{{ not_configured }}

{%- when InitHook::Prompt %}
function __zoxide_hook() {
    \builtin local -r retval="$?"
    zoxide add -- "$(__zoxide_pwd)"
    return "${retval}"
}

{%- when InitHook::Pwd %}
function __zoxide_hook() {
    \builtin local -r retval="$?"
    \builtin local -r pwd_tmp="$(__zoxide_pwd)"
    if [ -z "${__zoxide_pwd_old}" ]; then
        __zoxide_pwd_old="${pwd_tmp}"
    elif [ "${__zoxide_pwd_old}" != "${pwd_tmp}" ]; then
        __zoxide_pwd_old="${pwd_tmp}"
        zoxide add -- "${__zoxide_pwd_old}"
    fi
    return "${retval}"
}

{%- endmatch %}

{# $PROMPT_COMMAND cannot contain two semicolons in sequence. It can end with a
 # semicolon, but it cannot start with one. Therefore, always put the hook
 # at the start of $PROMPT_COMMAND. -#}

# Initialize hook.
if [ "${__zoxide_hooked}" != '1' ]; then
    __zoxide_hooked='1'
{%- if hook == InitHook::None %}
    {{ not_configured }}
{%- else %}
    if [ -z "${PROMPT_COMMAND}" ]; then
        PROMPT_COMMAND='__zoxide_hook'
    else
        PROMPT_COMMAND="__zoxide_hook;${PROMPT_COMMAND#;}"
    fi
{%- endif %}
fi

{{ section }}
# When using zoxide with --no-aliases, alias these internal functions as
# desired.
#

# Jump to a directory using only keywords.
function __zoxide_z() {
    if [ "$#" -eq 0 ]; then
        __zoxide_cd ~
    elif [ "$#" -eq 1 ] && [ "$1" = '-' ]; then
        if [ -n "${OLDPWD}" ]; then
            __zoxide_cd "${OLDPWD}"
        else
            # shellcheck disable=SC2016
            \builtin printf 'zoxide: $OLDPWD is not set\n'
            return 1
        fi
    elif [ "$#" -eq 1 ] && [ -d "$1" ]; then
        __zoxide_cd "$1"
    else
        \builtin local result
        result="$(zoxide query --exclude "$(__zoxide_pwd)" -- "$@")" && __zoxide_cd "${result}"
    fi
}

# Jump to a directory using interactive search.
function __zoxide_zi() {
    \builtin local result
    result="$(zoxide query -i -- "$@")" && __zoxide_cd "${result}"
}

{{ section }}
# Convenient aliases for zoxide. Disable these using --no-aliases.
#

{%- match cmd %}
{%- when Some with (cmd) %}

# Remove definitions.
function __zoxide_unset() {
    \builtin unset -f "$@" &>/dev/null
    \builtin unset -v "$@" &>/dev/null
    \builtin unalias "$@" &>/dev/null || \builtin :
}

__zoxide_unset '{{cmd}}'
function {{cmd}}() {
    __zoxide_z "$@"
}

__zoxide_unset '{{cmd}}i'
function {{cmd}}i() {
    __zoxide_zi "$@"
}

# Load completions.
{# This requires line editing. Since Bash supports only two modes of line
 # editing (`vim` and `emacs`), we check if one of them is enabled. -#}
if [[ :"${SHELLOPTS}": =~ :(vi|emacs): ]] && [ "${TERM}" != 'dumb' ]; then
    {# Use `printf '\e[5n'` to redraw line after fzf closes. -#}
    \builtin bind '"\e[0n": redraw-current-line' &>/dev/null

    function __zoxide_z_complete() {
        [ {{ "${#COMP_WORDS[@]}" }} -eq 2 ] || return

        \builtin local -r trigger='**'
        \builtin local query="${COMP_WORDS[1]}"

        if [[ ${query} == *"${trigger}" ]]; then
            query="${query:0:$(({{ "${#query} - ${#trigger}" }}))}"
            COMPREPLY=("$(_ZO_FZF_OPTS="\
                --bind=ctrl-z:ignore \
                --exit-0 \
                --height=35% \
                --inline-info \
                --no-sort \
                --reverse \
                --select-1 \
                " zoxide query -i -- "${query}")")
            \builtin printf '\e[5n'
        else
            \builtin mapfile -t COMPREPLY < <(compgen -A directory -S / -- "${query}")
        fi
    }

    \builtin complete -F __zoxide_z_complete -o nospace -- '{{cmd}}'
fi

{%- when None %}

{{ not_configured }}

{%- endmatch %}

{{ section }}
# To initialize zoxide, add this to your configuration (usually ~/.bashrc):
#
# eval "$(zoxide init bash)"
