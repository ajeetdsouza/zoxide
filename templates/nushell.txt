{%- let section = "# =============================================================================\n#" -%}
{%- let not_configured = "# -- not configured --" -%}

# Code generated by zoxide. DO NOT EDIT.

{{ section }}
# Hook configuration for zoxide.
#

{% if hook == InitHook::None -%}
{{ not_configured }}

{%- else -%}
# Initialize hook to add new entries to the database.
export-env {
{%- if hook == InitHook::Prompt %}
  $env.config = (
    $env.config?
    | default {}
    | upsert hooks { default {} }
    | upsert hooks.pre_prompt { default [] }
  )
  let __zoxide_hooked = (
    $env.config.hooks.pre_prompt | any { try { get __zoxide_hook } catch { false } }
  )
  if not $__zoxide_hooked {
    $env.config.hooks.pre_prompt = ($env.config.hooks.pre_prompt | append {
      __zoxide_hook: true,
      code: {|| zoxide add -- $env.PWD}
    })
  }
{%- else if hook == InitHook::Pwd %}
  $env.config = (
    $env.config?
    | default {}
    | upsert hooks { default {} }
    | upsert hooks.env_change { default {} }
    | upsert hooks.env_change.PWD { default [] }
  )
  let __zoxide_hooked = (
    $env.config.hooks.env_change.PWD | any { try { get __zoxide_hook } catch { false } }
  )
  if not $__zoxide_hooked {
    $env.config.hooks.env_change.PWD = ($env.config.hooks.env_change.PWD | append {
      __zoxide_hook: true,
      code: {|_, dir| zoxide add -- $dir}
    })
  }
{%- endif %}
}

{%- endif %}

{{ section }}
# When using zoxide with --no-cmd, alias these internal functions as desired.
#

# For hiding the "nu-complete zoxide path" command
module zoxide-commands {
  def "nu-complete zoxide path" [context: string] {
    let parts = $context | str trim | split row " " | skip 1 | each { str downcase }
    let completions = (
      zoxide query --list --exclude $env.PWD -- ...$parts
        | lines
        | each { |dir|
          if ($parts | length) <= 1 {
            $dir
          } else {
            let dir_lower = $dir | str downcase
            let rem_start = $parts | drop 1 | reduce --fold 0 { |part, rem_start|
              ($dir_lower | str index-of --range $rem_start.. $part) + ($part | str length)
            }
            {
              value: ($dir | str substring $rem_start..),
              description: $dir
            }
          }
        })
    {
      options: {
        sort: false,
        completion_algorithm: substring,
        case_sensitive: false,
      },
      completions: $completions,
    }
  }

  # Jump to a directory using only keywords.
  export def --env --wrapped __zoxide_z [...rest: string@"nu-complete zoxide path"] {
    let path = match $rest {
      [] => {'~'},
      [ '-' ] => {'-'},
      [ $arg ] if ($arg | path expand | path type) == 'dir' => {$arg}
      _ => {
        zoxide query --exclude $env.PWD -- ...$rest | str trim -r -c "\n"
      }
    }
    cd $path
  {%- if echo %}
    echo $env.PWD
  {%- endif %}
  }

  # Jump to a directory using interactive search.
  export def --env --wrapped __zoxide_zi [...rest:string@"nu-complete zoxide path"] {
    cd $'(zoxide query --interactive -- ...$rest | str trim -r -c "\n")'
  {%- if echo %}
    echo $env.PWD
  {%- endif %}
  }
}

use zoxide-commands *

{{ section }}
# Commands for zoxide. Disable these using --no-cmd.
#

{%- match cmd %}
{%- when Some with (cmd) %}

alias {{cmd}} = __zoxide_z
alias {{cmd}}i = __zoxide_zi

{%- when None %}

{{ not_configured }}

{%- endmatch %}

{{ section }}
# Add this to your env file (find it by running `$nu.env-path` in Nushell):
#
#   zoxide init nushell | save -f ~/.zoxide.nu
#
# Now, add this to the end of your config file (find it by running
# `$nu.config-path` in Nushell):
#
#   source ~/.zoxide.nu
#
# Note: zoxide only supports Nushell v0.89.0+.
