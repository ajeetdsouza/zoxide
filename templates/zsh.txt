{%- let section = "# =============================================================================\n#" -%}
{%- let not_configured = "# -- not configured --" -%}

{{ section }}
# Utility functions for zoxide.
#

# pwd based on the value of _ZO_RESOLVE_SYMLINKS.
function __zoxide_pwd() {
{%- if resolve_symlinks %}
    \builtin pwd -P
{%- else %}
    \builtin pwd -L
{%- endif %}
}

# cd + custom logic based on the value of _ZO_ECHO.
function __zoxide_cd() {
    # shellcheck disable=SC2164
    \builtin cd "$@" {%- if echo %} && __zoxide_pwd {%- endif %}
}

{{ section }}
# Hook configuration for zoxide.
#

{% if hook == InitHook::None -%}
{{ not_configured -}}

{% else -%}
# Hook to add new entries to the database.
function __zoxide_hook() {
    \command zoxide add -- "$(__zoxide_pwd || \builtin true)"
}

# Initialize hook.
# shellcheck disable=SC2154
if [[ ${precmd_functions[(Ie)__zoxide_hook]:-} -eq 0 ]] && [[ ${chpwd_functions[(Ie)__zoxide_hook]:-} -eq 0 ]]; then
{%- if hook == InitHook::Prompt %}
    precmd_functions+=(__zoxide_hook)
{%- else if hook == InitHook::Pwd %}
    chpwd_functions+=(__zoxide_hook)
{%- endif %}
fi

{%- endif %}

{{ section }}
# When using zoxide with --no-aliases, alias these internal functions as
# desired.
#

# Jump to a directory using only keywords.
function __zoxide_z() {
    if [[ "$#" -eq 0 ]]; then
        __zoxide_cd ~
    elif [[ "$#" -eq 1 ]] && [[ "$1" = '-' ]]; then
        if [[ -n "${OLDPWD}" ]]; then
            __zoxide_cd "${OLDPWD}"
        else
            # shellcheck disable=SC2016
            \builtin printf 'zoxide: $OLDPWD is not set'
            return 1
        fi
    elif [[ "$#" -eq 1 ]] && [[ -d "$1" ]]; then
        __zoxide_cd "$1"
    else
        \builtin local result
        result="$(\command zoxide query --exclude "$(__zoxide_pwd || \builtin true)" -- "$@")" &&
            __zoxide_cd "${result}"
    fi
}

# Jump to a directory using interactive search.
function __zoxide_zi() {
    \builtin local result
    result="$(\command zoxide query -i -- "$@")" && __zoxide_cd "${result}"
}

{{ section }}
# Convenient aliases for zoxide. Disable these using --no-aliases.
#

{%- match cmd %}
{%- when Some with (cmd) %}

# Remove definitions.
function __zoxide_unset() {
    \builtin unalias "$@" &>/dev/null || \builtin true
    \builtin unfunction "$@" &>/dev/null || \builtin true
    \builtin unset "$@" &>/dev/null
}

__zoxide_unset '{{cmd}}'
function {{cmd}}() {
    __zoxide_z "$@"
}

__zoxide_unset '{{cmd}}i'
function {{cmd}}i() {
    __zoxide_zi "$@"
}

if [[ -o zle ]]; then
  function _{{cmd}}() {
    \builtin local buffer tokens
    # shellcheck disable=SC2034,SC2153,SC2154
    buffer="${BUFFER}."
    # shellcheck disable=SC2206,SC2296
    tokens=(${(Q)${(z)buffer}})

    if [[ "{{ "${#tokens[@]}" }}" -eq 2 ]]; then
        _files -/
    elif [[ "${tokens[-1]}" == '.' ]]; then
        \builtin printf '\e[5n'
    fi
  }

  function _{{cmd}}_helper() {
    \builtin local tokens result
    # shellcheck disable=SC2154,SC2206,SC2296
    tokens=(${(Q)${(z)BUFFER}})
    # shellcheck disable=SC2086
    if result="$(\command zoxide query -i -- ${tokens[2,-1]})"; then
      # shellcheck disable=SC2034
      RBUFFER=''
      # shellcheck disable=SC2034,SC2296
      LBUFFER="${tokens[1]} ${(q-)result}"
    fi
    \builtin zle reset-prompt
  }

  \builtin zle -N _{{cmd}}_helper
  \builtin bindkey "\e[0n" _{{cmd}}_helper
  if \builtin typeset -f 'compdef' &>/dev/null; then
    \compdef -d {{cmd}}
    \compdef _{{cmd}} {{cmd}}
  fi
fi

{%- when None %}

{{ not_configured }}

{%- endmatch %}

{{ section }}
# To initialize zoxide, add this to your configuration (usually ~/.zshrc):
#
# eval "$(zoxide init zsh)"
